// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ZONES_ZONES_H_
#define FLATBUFFERS_GENERATED_ZONES_ZONES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Zones {

struct PlayerState;
struct PlayerStateBuilder;

enum PlayerResource : int32_t {
  PlayerResource_Snare = 0,
  PlayerResource_Voice = 1,
  PlayerResource_MIN = PlayerResource_Snare,
  PlayerResource_MAX = PlayerResource_Voice
};

inline const PlayerResource (&EnumValuesPlayerResource())[2] {
  static const PlayerResource values[] = {
    PlayerResource_Snare,
    PlayerResource_Voice
  };
  return values;
}

inline const char * const *EnumNamesPlayerResource() {
  static const char * const names[3] = {
    "Snare",
    "Voice",
    nullptr
  };
  return names;
}

inline const char *EnumNamePlayerResource(PlayerResource e) {
  if (::flatbuffers::IsOutRange(e, PlayerResource_Snare, PlayerResource_Voice)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPlayerResource()[index];
}

struct PlayerState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYING = 4,
    VT_LOOPING = 6,
    VT_RESOURCE = 8
  };
  bool playing() const {
    return GetField<uint8_t>(VT_PLAYING, 0) != 0;
  }
  bool mutate_playing(bool _playing = 0) {
    return SetField<uint8_t>(VT_PLAYING, static_cast<uint8_t>(_playing), 0);
  }
  bool looping() const {
    return GetField<uint8_t>(VT_LOOPING, 0) != 0;
  }
  bool mutate_looping(bool _looping = 0) {
    return SetField<uint8_t>(VT_LOOPING, static_cast<uint8_t>(_looping), 0);
  }
  Zones::PlayerResource resource() const {
    return static_cast<Zones::PlayerResource>(GetField<int32_t>(VT_RESOURCE, 0));
  }
  bool mutate_resource(Zones::PlayerResource _resource = static_cast<Zones::PlayerResource>(0)) {
    return SetField<int32_t>(VT_RESOURCE, static_cast<int32_t>(_resource), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PLAYING, 1) &&
           VerifyField<uint8_t>(verifier, VT_LOOPING, 1) &&
           VerifyField<int32_t>(verifier, VT_RESOURCE, 4) &&
           verifier.EndTable();
  }
};

struct PlayerStateBuilder {
  typedef PlayerState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_playing(bool playing) {
    fbb_.AddElement<uint8_t>(PlayerState::VT_PLAYING, static_cast<uint8_t>(playing), 0);
  }
  void add_looping(bool looping) {
    fbb_.AddElement<uint8_t>(PlayerState::VT_LOOPING, static_cast<uint8_t>(looping), 0);
  }
  void add_resource(Zones::PlayerResource resource) {
    fbb_.AddElement<int32_t>(PlayerState::VT_RESOURCE, static_cast<int32_t>(resource), 0);
  }
  explicit PlayerStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerState> CreatePlayerState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool playing = false,
    bool looping = false,
    Zones::PlayerResource resource = Zones::PlayerResource_Snare) {
  PlayerStateBuilder builder_(_fbb);
  builder_.add_resource(resource);
  builder_.add_looping(looping);
  builder_.add_playing(playing);
  return builder_.Finish();
}

}  // namespace Zones

#endif  // FLATBUFFERS_GENERATED_ZONES_ZONES_H_
