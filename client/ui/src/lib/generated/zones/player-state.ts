// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { PlayerResource } from '../zones/player-resource.js';


export class PlayerState implements flatbuffers.IUnpackableObject<PlayerStateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PlayerState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlayerState(bb:flatbuffers.ByteBuffer, obj?:PlayerState):PlayerState {
  return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlayerState(bb:flatbuffers.ByteBuffer, obj?:PlayerState):PlayerState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PlayerState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

playing():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

looping():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

resource():PlayerResource {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : PlayerResource.Snare;
}

static startPlayerState(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPlaying(builder:flatbuffers.Builder, playing:boolean) {
  builder.addFieldInt8(0, +playing, +false);
}

static addLooping(builder:flatbuffers.Builder, looping:boolean) {
  builder.addFieldInt8(1, +looping, +false);
}

static addResource(builder:flatbuffers.Builder, resource:PlayerResource) {
  builder.addFieldInt32(2, resource, PlayerResource.Snare);
}

static endPlayerState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlayerState(builder:flatbuffers.Builder, playing:boolean, looping:boolean, resource:PlayerResource):flatbuffers.Offset {
  PlayerState.startPlayerState(builder);
  PlayerState.addPlaying(builder, playing);
  PlayerState.addLooping(builder, looping);
  PlayerState.addResource(builder, resource);
  return PlayerState.endPlayerState(builder);
}

unpack(): PlayerStateT {
  return new PlayerStateT(
    this.playing(),
    this.looping(),
    this.resource()
  );
}


unpackTo(_o: PlayerStateT): void {
  _o.playing = this.playing();
  _o.looping = this.looping();
  _o.resource = this.resource();
}
}

export class PlayerStateT implements flatbuffers.IGeneratedObject {
constructor(
  public playing: boolean = false,
  public looping: boolean = false,
  public resource: PlayerResource = PlayerResource.Snare
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return PlayerState.createPlayerState(builder,
    this.playing,
    this.looping,
    this.resource
  );
}
}
