// METADATA

IsMono()
IsStereo()

SupportsMono()
SupportsStereo()
SupportsTrueStereo()

If mono only allow C

// Format

LoadFromMeta(Metadata);
AudioBlock GetPosition(Position);

// Format Engine running in stereo, IR in true stereo



// Case 1
input: C - mono
target: mono

Loads mono wav file from disk
Allocates target buffer
Copies mono input to target


// Case 2
input: C - stereo
target: stereo

Loads stereo wav file from disk
Allocates target buffer
Copies stereo input to target


// Case 3
input: C - stereo
target: mono

Loads stereo wav file from disk
Allocates target mono buffer
Sums LR into mono target buffer


// Case 4
input: LR - stereo
target: true_stereo

Loads LR stereo wav files from disk as separate buffers
Allocates 4 channel target buffer
Copies L into first 2 channels
Copies R into last 2 channels


// Case 5
input: LR - stereo
target: mono

Loads LR stereo wav files from disk as separate buffers
Allocates mono target buffer

Sum all channels into single output buffer???


// Case 5
input: LCR - stereo
target: mono

Loads C stereo wav file from disk
Allocates mono target buffer
Sum stereo into mono target


// Case 1 - AMBISONICS...
input: C - foa
target: 5.1


enum class ChannelFormat {
    kMono
    kStereo,
    kFoa,
    k51
}

enum class TargetFormat {
    kMono,
    kStereo,
    kTrueStereo
    kFoa,
    k51
}

struct IrMeta {
    ChannelFormat channel_format;
    std::array<> position_map {c: "", ....}
}

void StereoFormatter (IrMeta & meta, TargetFormat target_format, AudioBlock<...> target) {
    if(!meta.IsTargetFormatSupported(target_format))
        throw Exception...

    switch (target_format) {
        case kMono:
            if(meta.hasCenter()) {
                ....
            } else {
                ...
            }
            break;
        case kStereo:
            break;
        case kTrueStereo:

            break;
    }
}

void AmbisonicFormatter (IrMeta & meta, TargetFormat target_format, AudioBlock<...> target) {
    if(!meta.IsTargetFormatSupported(target_format))
        throw Exception...

    switch (target_format) {
        case kMono:
            break;
        case kStereo:
            break;
        case kTrueStereo:
            break;
        case k51:
            auto getAmbisonicOrder = meta.GetAmbisonicOrder();
            auto ambisonic_decoder = AmbisonicDecoder();

            auto ir_file = meta.loadC()
            ambisonic_decoder.decodeFor51(ir_file)

            break;
    }
}


